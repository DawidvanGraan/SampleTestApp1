// GIT SHA
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

buildscript {
    ext.android_support_lib_version = '23.3.0'
    ext.retrolambda_version = '3.2.5'
    ext.rxjava_version = '1.1.0'
    ext.rxbinding_version = '0.4.0'
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "me.tatarka:gradle-retrolambda:$retrolambda_version"
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'spoon'

// This section is optional
spoon {
    // for debug output
    debug = true

    // To run a single test class
//    className = 'fully.qualified.TestCase'

    // To run a single method in TestCase
//    methodName = 'testMyApp'
}

android {
    testBuildType 'debug'
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "za.co.polymorph.rxsampleapp"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    }

    signingConfigs {
        debug {
            storeFile file("../rxsampleapp-debug.jks")
            storePassword 'placeholder'
            keyAlias "debug"
            keyPassword 'placeholder'
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://clojars.org/repo/" }
}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-annotations:$android_support_lib_version"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //
    // Support Libraries
    compile "com.android.support:appcompat-v7:$android_support_lib_version"
    compile "com.android.support:design:$android_support_lib_version"
    compile "com.android.support:cardview-v7:$android_support_lib_version"
    compile "com.android.support:gridlayout-v7:$android_support_lib_version"
    compile "com.android.support:palette-v7:$android_support_lib_version"
    compile "com.android.support:recyclerview-v7:$android_support_lib_version"
    compile "com.android.support:percent:$android_support_lib_version"
    compile "com.android.support:support-annotations:$android_support_lib_version"
    //
    // RxJava
    // (Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.)
    compile "io.reactivex:rxandroid:$rxjava_version"
    compile "io.reactivex:rxjava:$rxjava_version"
    //
    // RxBinding
    compile "com.jakewharton.rxbinding:rxbinding-design:$rxbinding_version"
    compile "com.jakewharton.rxbinding:rxbinding:$rxbinding_version"
    compile "com.jakewharton.rxbinding:rxbinding-support-v4:$rxbinding_version"
    compile "com.jakewharton.rxbinding:rxbinding-appcompat-v7:$rxbinding_version"
    compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$rxbinding_version"
    //
    // Butterknife
    compile 'com.jakewharton:butterknife:7.0.1'
    //
    // Dagger
    apt 'com.google.dagger:dagger-compiler:2.1'
    compile 'com.google.dagger:dagger:2.1'
    provided 'javax.annotation:jsr250-api:1.0'
    //
    // AutoValue
    compile "com.google.auto.value:auto-value:1.1"
    compile 'javax.annotation:javax.annotation-api:1.2'
    //
    // LeakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    //
    // Tests
    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    //
    // compile 'net.hockeyapp.android:HockeySDK:3.6.2'
    //
    // RxLint
    // compile 'nl.littlerobots.rxlint:rxlint:1.0'
    //
    // RetroFit
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.squareup.retrofit2:retrofit:2.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.1'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.1'
    //
    //
    // Stetho
    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
}

task loadDebugKeys << {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        android.signingConfigs.debug.storePassword = properties['debug.password.store'] ?: debugPasswordStore
        android.signingConfigs.debug.keyPassword = properties['debug.password.key'] ?: debugPasswordKey
    } else {
        // applied via cli as
        // -PdebugPasswordStore=xxxx and -PdebugPasswordKey=xxxx
        //
        android.signingConfigs.debug.storePassword = debugPasswordStore
        android.signingConfigs.debug.keyPassword = debugPasswordKey
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageDebug")) {
        theTask.dependsOn "loadDebugKeys"
    }
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Should.class"
    include "**/*Test.class"
    include "**/*Tests.class"
    include "**/*.so"
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}